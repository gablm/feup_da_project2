#include "ui.h"
#include <cmath>

/**
 * Checks if the return data from a heuristic is valid.
 * @param data Struct containing the data generated by the heuristic.
*/
bool isInvalid(ReturnDataTSP data)
{
	return data.processingTime == -1 || data.distances.empty() 
		|| data.stops.empty() || data.totalDistance == -1;
}

/**
 * Selects a vertex from the currently loaded graph 
 * in order to be used in heuristic 4.4
 * @return Vertex selected using an id.
*/
Vertex *UI::getBaseVertex()
{
	while (1)
	{
		CLEAR;
		std::cout 
		<< "This heuristic requires a base vertex where the route will start.\n"
		<< "Please indicate the id for this vertex:\n"
		<< "\n"
		<< "$> ";

		std::string str;
		std::getline(std::cin, str);

		if (str == "b" || str == "B") return nullptr;

		if (str == "q" || str == "Q")
		{
			CLEAR;
			exit(0);
		}

		try 
		{
			int id = std::stoi(str);
			Vertex *ret = manager.getNetwork().findVertex(id);
			if (ret != nullptr) return ret;
			showMessage("INVALID VERTEX", "Please input a valid id!");
		}
		catch (const std::exception& e)
		{
			showMessage("COULD NOT CONVERT NUMBER", "Please input a valid number!");
		}		
	}
	return nullptr;
}

/**
 * Shows the route calculated by a specific heuristic for the currently loaded type.
 * @param type Heuristic type.
*/
void UI::resultMenu(HeuristicType type)
{
	Vertex *base = nullptr;
	if (type == HeuristicType::real_world_2_4) 
	{
		base = getBaseVertex();
		if (base == nullptr) return;
	}

	ReturnDataTSP ret = manager.tspCaller(type, base);

	if (isInvalid(ret))
	{
		showMessage("AN ERROR OCCURRED!", "The heuristic returned invalid data.");
		return;
	}

	size_t count = 0;
	while (1)
	{
		CLEAR;
		std::cout 
		<< "Results for Heuristic: " << Manager::getHeuristicAsString(type) << "\n"
		<< "\n";

		size_t i = count;
		if (i != 0) std::cout << "("<< i << " ENTRIES ABOVE)\n...\n↓\n";

		for (; i < std::min(count + 5, ret.stops.size() - 1); i++)
		{
			std::cout
			<< ret.stops[i] << "\n"
			<< "↓ " << ret.distances[i] << "km\n";
		}
		std::cout << ret.stops[i] << "\n";
		if (i != ret.stops.size() - 1) std::cout << "↓\n...\n("<< ret.stops.size() - i << " ENTRIES BELOW)\n";

		std::cout
		<< "\n" 
		<< "Total Stops: " << ret.stops.size() - 2 << " (" << ret.stops.size() - 1 << " nodes visited)\n"
		<< "Total Distance Travelled: " << ret.totalDistance << "km\n"
		<< "Time taken to run the heuristic: " << ret.processingTime << "s\n"
		<< "\n"
		<< "[S] - Push list down\t[W] - Push list up\n"
		<< "[B] - Back \t\t[Q] - Exit\n"
		<< "\n"
        << "$> ";

		std::string str;
		std::getline(std::cin, str);

		if (str == "b" || str == "B") return;

		if (str == "q" || str == "Q")
		{
			CLEAR;
			exit(0);
		}

		if (str == "s" || str == "S")
		{
			count = count + 5 < ret.stops.size() - 1 ? count + 5 : count;
			continue;
		}

		if (str == "w" || str == "W")
		{
			count = count < 5 ? 0 : count - 5;
			continue;
		}
	}
}
